// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: vessel.proto

package vessel

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for VesselService service

func NewVesselServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for VesselService service

type VesselService interface {
	// 检查是否有能运送货物的轮船
	FindAvailable(ctx context.Context, in *Specification, opts ...client.CallOption) (*VesselResponse, error)
}

type vesselService struct {
	c    client.Client
	name string
}

func NewVesselService(name string, c client.Client) VesselService {
	return &vesselService{
		c:    c,
		name: name,
	}
}

func (c *vesselService) FindAvailable(ctx context.Context, in *Specification, opts ...client.CallOption) (*VesselResponse, error) {
	req := c.c.NewRequest(c.name, "VesselService.FindAvailable", in)
	out := new(VesselResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VesselService service

type VesselServiceHandler interface {
	// 检查是否有能运送货物的轮船
	FindAvailable(context.Context, *Specification, *VesselResponse) error
}

func RegisterVesselServiceHandler(s server.Server, hdlr VesselServiceHandler, opts ...server.HandlerOption) error {
	type vesselService interface {
		FindAvailable(ctx context.Context, in *Specification, out *VesselResponse) error
	}
	type VesselService struct {
		vesselService
	}
	h := &vesselServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&VesselService{h}, opts...))
}

type vesselServiceHandler struct {
	VesselServiceHandler
}

func (h *vesselServiceHandler) FindAvailable(ctx context.Context, in *Specification, out *VesselResponse) error {
	return h.VesselServiceHandler.FindAvailable(ctx, in, out)
}
